name: 'CI Pipeline for my Workflows'

on:
  push:
    branches: [ "main" ]
    paths:
      - Workflow/**

  workflow_run:
    workflows: ['Terraform depoy environment']
    types:
      - completed

permissions:
  contents: read
  id-token: write
# Dependency to a forking workflow
  
jobs:
  build:
    name: Deploy Java Spring App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          java-version: '23'

      - name: Build with Maven
        run: mvn clean package

      - name: Build Docker image
        run: docker build -t my-getting-started:${{ github.sha }} .

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push my-getting-started:${{ github.sha }}

  terraform-deploy:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production


    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Configure AWS credentials using GitHub Actions' AWS credentials action
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: arn:aws:iam::123302325581:role/Andrey_CamundaCon_Demo
        aws-region: eu-west-1

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./terraform/workflow-deployment
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./terraform/workflow-deployment      
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: ./terraform/workflow-deployment
      run: terraform apply -auto-approve -input=false -var="image_tag=${{ github.sha }}"

